<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="11" skipped="0" tests="104" time="15.303" timestamp="2024-11-16T09:52:54.978071+07:00" hostname="lam-ThinkPad-X1C-5th-W10DG"><testcase classname="tests.test_api" name="test_api_case[test_case0]" time="1.062" /><testcase classname="tests.test_api" name="test_api_case[test_case1]" time="0.160" /><testcase classname="tests.test_api" name="test_api_case[test_case2]" time="0.404" /><testcase classname="tests.test_api" name="test_api_case[test_case3]" time="0.124" /><testcase classname="tests.test_api" name="test_api_case[test_case4]" time="0.151" /><testcase classname="tests.test_api" name="test_api_case[test_case5]" time="0.110" /><testcase classname="tests.test_api" name="test_api_case[test_case6]" time="0.128" /><testcase classname="tests.test_api" name="test_api_case[test_case7]" time="0.111" /><testcase classname="tests.test_api" name="test_api_case[test_case8]" time="0.122" /><testcase classname="tests.test_api" name="test_api_case[test_case9]" time="0.136" /><testcase classname="tests.test_api" name="test_api_case[test_case10]" time="0.132" /><testcase classname="tests.test_api" name="test_api_case[test_case11]" time="0.129" /><testcase classname="tests.test_api" name="test_api_case[test_case12]" time="0.113" /><testcase classname="tests.test_api" name="test_api_case[test_case13]" time="0.124" /><testcase classname="tests.test_api" name="test_api_case[test_case14]" time="0.150" /><testcase classname="tests.test_api" name="test_api_case[test_case15]" time="0.127" /><testcase classname="tests.test_api" name="test_api_case[test_case16]" time="0.133" /><testcase classname="tests.test_api" name="test_api_case[test_case17]" time="0.105" /><testcase classname="tests.test_api" name="test_api_case[test_case18]" time="0.104" /><testcase classname="tests.test_api" name="test_api_case[test_case19]" time="0.111" /><testcase classname="tests.test_api" name="test_api_case[test_case20]" time="0.125" /><testcase classname="tests.test_api" name="test_api_case[test_case21]" time="0.109" /><testcase classname="tests.test_api" name="test_api_case[test_case22]" time="0.107" /><testcase classname="tests.test_api" name="test_api_case[test_case23]" time="0.122"><failure message="Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (400)&#10;assert 200 == 400">test_case = {'Authorization': 'Bearer your_token_here', 'Body': '{}', 'Expected Response': '', 'Expected Status Code': '400', ...}
token = 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXIiOiIiLCJjb2RlIjoiNjJkNjcxZTEzYTFmMDQzYjllYmY5MGZkIiwiY3JlYXRlZ...Y2axiSWYmRqW7a7TfBOTcbZtIR7i6xPPDrVgPJ6lQ4VlqSYbaP35vRf-VaAfrPfzNCBidq6_SHyBnBdSYXW1wU6eefkYT9Ej-ImxAHJ8VtNIHJ4MsK9PJA'

    @pytest.mark.parametrize("test_case", load_test_cases("data/test_cases.csv"))
    def test_api_case(test_case, token):
        assert token, "Không lấy được token, dừng quá trình kiểm thử."
    
        url = test_case['URL']
    
        # Parse headers và thêm Authorization từ cột Authorization
        try:
            headers = json.loads(test_case['Headers']) if test_case['Headers'] else {}
            headers["Authorization"] = test_case['Authorization'].replace("Bearer your_token_here", f"{token}")
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Headers: {test_case['Headers']}")
    
        # Parse body của yêu cầu
        try:
            payload = json.loads(test_case['Body']) if 'Body' in test_case and test_case['Body'] else {}
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Body: {test_case.get('Body', '')}")
    
        # Phương thức HTTP
        method = test_case['Method'].strip().upper()
        assert method in ['GET', 'POST', 'PUT', 'DELETE'], f"Phương thức HTTP '{method}' không hợp lệ"
    
        # Mã trạng thái mong đợi
        expected_status = int(test_case['Expected Status Code'])
        expected_result = test_case.get('Expected Response', '')
    
        # Gửi yêu cầu HTTP
        if method == 'GET':
            response = requests.get(url, headers=headers)
        elif method == 'POST':
            response = requests.post(url, headers=headers, json=payload)
        elif method == 'PUT':
            response = requests.put(url, headers=headers, json=payload)
        elif method == 'DELETE':
            response = requests.delete(url, headers=headers, json=payload)
    
        # Kiểm tra kết quả
        actual_status = response.status_code
        actual_body = response.json() if response.headers.get("Content-Type") == "application/json" else response.text
    
          #  Sử dụng try-except cho ghi nhận kết quả, đồng thời cho phép pytest xử lý assert để tạo báo cáo HTML chính xác
        pass_fail = "Pass"
        error_message = ""
        try:
            assert actual_status == expected_status, f"Lỗi: Mã trạng thái thực tế ({actual_status}) không khớp với mong đợi ({expected_status})"
        except AssertionError as e:
            pass_fail = "Fail"
            error_message = str(e)
        # Thêm vào danh sách kết quả để ghi vào Excel
        results.append({
            "Test Case ID": test_case['Test Case ID'],
            "Expected Status": expected_status,
            "Expected Result": expected_result,
            "Actual Status": actual_status,
            "Actual Result": actual_body,
            "Result": pass_fail,
            "Error Message": error_message
        })
         # Dùng pytest.fail để đảm bảo báo cáo HTML ghi nhận các test case fail
        if pass_fail == "Fail":
&gt;           pytest.fail(error_message)
E           Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (400)
E           assert 200 == 400

tests/test_api.py:107: Failed</failure></testcase><testcase classname="tests.test_api" name="test_api_case[test_case24]" time="0.123" /><testcase classname="tests.test_api" name="test_api_case[test_case25]" time="0.135"><failure message="Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (415)&#10;assert 200 == 415">test_case = {'Authorization': 'Bearer your_token_here', 'Body': '{"status": true}', 'Expected Response': '{"detail": "The Content-Type field is required"}', 'Expected Status Code': '415', ...}
token = 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXIiOiIiLCJjb2RlIjoiNjJkNjcxZTEzYTFmMDQzYjllYmY5MGZkIiwiY3JlYXRlZ...Y2axiSWYmRqW7a7TfBOTcbZtIR7i6xPPDrVgPJ6lQ4VlqSYbaP35vRf-VaAfrPfzNCBidq6_SHyBnBdSYXW1wU6eefkYT9Ej-ImxAHJ8VtNIHJ4MsK9PJA'

    @pytest.mark.parametrize("test_case", load_test_cases("data/test_cases.csv"))
    def test_api_case(test_case, token):
        assert token, "Không lấy được token, dừng quá trình kiểm thử."
    
        url = test_case['URL']
    
        # Parse headers và thêm Authorization từ cột Authorization
        try:
            headers = json.loads(test_case['Headers']) if test_case['Headers'] else {}
            headers["Authorization"] = test_case['Authorization'].replace("Bearer your_token_here", f"{token}")
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Headers: {test_case['Headers']}")
    
        # Parse body của yêu cầu
        try:
            payload = json.loads(test_case['Body']) if 'Body' in test_case and test_case['Body'] else {}
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Body: {test_case.get('Body', '')}")
    
        # Phương thức HTTP
        method = test_case['Method'].strip().upper()
        assert method in ['GET', 'POST', 'PUT', 'DELETE'], f"Phương thức HTTP '{method}' không hợp lệ"
    
        # Mã trạng thái mong đợi
        expected_status = int(test_case['Expected Status Code'])
        expected_result = test_case.get('Expected Response', '')
    
        # Gửi yêu cầu HTTP
        if method == 'GET':
            response = requests.get(url, headers=headers)
        elif method == 'POST':
            response = requests.post(url, headers=headers, json=payload)
        elif method == 'PUT':
            response = requests.put(url, headers=headers, json=payload)
        elif method == 'DELETE':
            response = requests.delete(url, headers=headers, json=payload)
    
        # Kiểm tra kết quả
        actual_status = response.status_code
        actual_body = response.json() if response.headers.get("Content-Type") == "application/json" else response.text
    
          #  Sử dụng try-except cho ghi nhận kết quả, đồng thời cho phép pytest xử lý assert để tạo báo cáo HTML chính xác
        pass_fail = "Pass"
        error_message = ""
        try:
            assert actual_status == expected_status, f"Lỗi: Mã trạng thái thực tế ({actual_status}) không khớp với mong đợi ({expected_status})"
        except AssertionError as e:
            pass_fail = "Fail"
            error_message = str(e)
        # Thêm vào danh sách kết quả để ghi vào Excel
        results.append({
            "Test Case ID": test_case['Test Case ID'],
            "Expected Status": expected_status,
            "Expected Result": expected_result,
            "Actual Status": actual_status,
            "Actual Result": actual_body,
            "Result": pass_fail,
            "Error Message": error_message
        })
         # Dùng pytest.fail để đảm bảo báo cáo HTML ghi nhận các test case fail
        if pass_fail == "Fail":
&gt;           pytest.fail(error_message)
E           Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (415)
E           assert 200 == 415

tests/test_api.py:107: Failed</failure></testcase><testcase classname="tests.test_api" name="test_api_case[test_case26]" time="0.110" /><testcase classname="tests.test_api" name="test_api_case[test_case27]" time="0.110" /><testcase classname="tests.test_api" name="test_api_case[test_case28]" time="0.131" /><testcase classname="tests.test_api" name="test_api_case[test_case29]" time="0.108" /><testcase classname="tests.test_api" name="test_api_case[test_case30]" time="0.101" /><testcase classname="tests.test_api" name="test_api_case[test_case31]" time="0.101" /><testcase classname="tests.test_api" name="test_api_case[test_case32]" time="0.114" /><testcase classname="tests.test_api" name="test_api_case[test_case33]" time="0.119" /><testcase classname="tests.test_api" name="test_api_case[test_case34]" time="0.110" /><testcase classname="tests.test_api" name="test_api_case[test_case35]" time="0.131" /><testcase classname="tests.test_api" name="test_api_case[test_case36]" time="0.133" /><testcase classname="tests.test_api" name="test_api_case[test_case37]" time="0.122" /><testcase classname="tests.test_api" name="test_api_case[test_case38]" time="0.105" /><testcase classname="tests.test_api" name="test_api_case[test_case39]" time="0.400" /><testcase classname="tests.test_api" name="test_api_case[test_case40]" time="0.124" /><testcase classname="tests.test_api" name="test_api_case[test_case41]" time="0.134" /><testcase classname="tests.test_api" name="test_api_case[test_case42]" time="0.130" /><testcase classname="tests.test_api" name="test_api_case[test_case43]" time="0.120" /><testcase classname="tests.test_api" name="test_api_case[test_case44]" time="0.254" /><testcase classname="tests.test_api" name="test_api_case[test_case45]" time="0.129" /><testcase classname="tests.test_api" name="test_api_case[test_case46]" time="0.124" /><testcase classname="tests.test_api" name="test_api_case[test_case47]" time="0.125" /><testcase classname="tests.test_api" name="test_api_case[test_case48]" time="0.143" /><testcase classname="tests.test_api" name="test_api_case[test_case49]" time="0.137" /><testcase classname="tests.test_api" name="test_api_case[test_case50]" time="0.124"><failure message="Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (201)&#10;assert 200 == 201">test_case = {'Authorization': 'Bearer your_token_here', 'Body': '{"page": -1}', 'Expected Response': '{"success":false,"detail":"Invalid page!","data":null}', 'Expected Status Code': '201', ...}
token = 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXIiOiIiLCJjb2RlIjoiNjJkNjcxZTEzYTFmMDQzYjllYmY5MGZkIiwiY3JlYXRlZ...Y2axiSWYmRqW7a7TfBOTcbZtIR7i6xPPDrVgPJ6lQ4VlqSYbaP35vRf-VaAfrPfzNCBidq6_SHyBnBdSYXW1wU6eefkYT9Ej-ImxAHJ8VtNIHJ4MsK9PJA'

    @pytest.mark.parametrize("test_case", load_test_cases("data/test_cases.csv"))
    def test_api_case(test_case, token):
        assert token, "Không lấy được token, dừng quá trình kiểm thử."
    
        url = test_case['URL']
    
        # Parse headers và thêm Authorization từ cột Authorization
        try:
            headers = json.loads(test_case['Headers']) if test_case['Headers'] else {}
            headers["Authorization"] = test_case['Authorization'].replace("Bearer your_token_here", f"{token}")
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Headers: {test_case['Headers']}")
    
        # Parse body của yêu cầu
        try:
            payload = json.loads(test_case['Body']) if 'Body' in test_case and test_case['Body'] else {}
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Body: {test_case.get('Body', '')}")
    
        # Phương thức HTTP
        method = test_case['Method'].strip().upper()
        assert method in ['GET', 'POST', 'PUT', 'DELETE'], f"Phương thức HTTP '{method}' không hợp lệ"
    
        # Mã trạng thái mong đợi
        expected_status = int(test_case['Expected Status Code'])
        expected_result = test_case.get('Expected Response', '')
    
        # Gửi yêu cầu HTTP
        if method == 'GET':
            response = requests.get(url, headers=headers)
        elif method == 'POST':
            response = requests.post(url, headers=headers, json=payload)
        elif method == 'PUT':
            response = requests.put(url, headers=headers, json=payload)
        elif method == 'DELETE':
            response = requests.delete(url, headers=headers, json=payload)
    
        # Kiểm tra kết quả
        actual_status = response.status_code
        actual_body = response.json() if response.headers.get("Content-Type") == "application/json" else response.text
    
          #  Sử dụng try-except cho ghi nhận kết quả, đồng thời cho phép pytest xử lý assert để tạo báo cáo HTML chính xác
        pass_fail = "Pass"
        error_message = ""
        try:
            assert actual_status == expected_status, f"Lỗi: Mã trạng thái thực tế ({actual_status}) không khớp với mong đợi ({expected_status})"
        except AssertionError as e:
            pass_fail = "Fail"
            error_message = str(e)
        # Thêm vào danh sách kết quả để ghi vào Excel
        results.append({
            "Test Case ID": test_case['Test Case ID'],
            "Expected Status": expected_status,
            "Expected Result": expected_result,
            "Actual Status": actual_status,
            "Actual Result": actual_body,
            "Result": pass_fail,
            "Error Message": error_message
        })
         # Dùng pytest.fail để đảm bảo báo cáo HTML ghi nhận các test case fail
        if pass_fail == "Fail":
&gt;           pytest.fail(error_message)
E           Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (201)
E           assert 200 == 201

tests/test_api.py:107: Failed</failure></testcase><testcase classname="tests.test_api" name="test_api_case[test_case51]" time="0.141"><failure message="Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (202)&#10;assert 200 == 202">test_case = {'Authorization': 'Bearer your_token_here', 'Body': '{"page_size": -5}', 'Expected Response': '{"success":false,"detail":"Invalid page size!","data":null} ', 'Expected Status Code': '202', ...}
token = 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXIiOiIiLCJjb2RlIjoiNjJkNjcxZTEzYTFmMDQzYjllYmY5MGZkIiwiY3JlYXRlZ...Y2axiSWYmRqW7a7TfBOTcbZtIR7i6xPPDrVgPJ6lQ4VlqSYbaP35vRf-VaAfrPfzNCBidq6_SHyBnBdSYXW1wU6eefkYT9Ej-ImxAHJ8VtNIHJ4MsK9PJA'

    @pytest.mark.parametrize("test_case", load_test_cases("data/test_cases.csv"))
    def test_api_case(test_case, token):
        assert token, "Không lấy được token, dừng quá trình kiểm thử."
    
        url = test_case['URL']
    
        # Parse headers và thêm Authorization từ cột Authorization
        try:
            headers = json.loads(test_case['Headers']) if test_case['Headers'] else {}
            headers["Authorization"] = test_case['Authorization'].replace("Bearer your_token_here", f"{token}")
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Headers: {test_case['Headers']}")
    
        # Parse body của yêu cầu
        try:
            payload = json.loads(test_case['Body']) if 'Body' in test_case and test_case['Body'] else {}
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Body: {test_case.get('Body', '')}")
    
        # Phương thức HTTP
        method = test_case['Method'].strip().upper()
        assert method in ['GET', 'POST', 'PUT', 'DELETE'], f"Phương thức HTTP '{method}' không hợp lệ"
    
        # Mã trạng thái mong đợi
        expected_status = int(test_case['Expected Status Code'])
        expected_result = test_case.get('Expected Response', '')
    
        # Gửi yêu cầu HTTP
        if method == 'GET':
            response = requests.get(url, headers=headers)
        elif method == 'POST':
            response = requests.post(url, headers=headers, json=payload)
        elif method == 'PUT':
            response = requests.put(url, headers=headers, json=payload)
        elif method == 'DELETE':
            response = requests.delete(url, headers=headers, json=payload)
    
        # Kiểm tra kết quả
        actual_status = response.status_code
        actual_body = response.json() if response.headers.get("Content-Type") == "application/json" else response.text
    
          #  Sử dụng try-except cho ghi nhận kết quả, đồng thời cho phép pytest xử lý assert để tạo báo cáo HTML chính xác
        pass_fail = "Pass"
        error_message = ""
        try:
            assert actual_status == expected_status, f"Lỗi: Mã trạng thái thực tế ({actual_status}) không khớp với mong đợi ({expected_status})"
        except AssertionError as e:
            pass_fail = "Fail"
            error_message = str(e)
        # Thêm vào danh sách kết quả để ghi vào Excel
        results.append({
            "Test Case ID": test_case['Test Case ID'],
            "Expected Status": expected_status,
            "Expected Result": expected_result,
            "Actual Status": actual_status,
            "Actual Result": actual_body,
            "Result": pass_fail,
            "Error Message": error_message
        })
         # Dùng pytest.fail để đảm bảo báo cáo HTML ghi nhận các test case fail
        if pass_fail == "Fail":
&gt;           pytest.fail(error_message)
E           Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (202)
E           assert 200 == 202

tests/test_api.py:107: Failed</failure></testcase><testcase classname="tests.test_api" name="test_api_case[test_case52]" time="0.116"><failure message="Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (203)&#10;assert 200 == 203">test_case = {'Authorization': 'Bearer your_token_here', 'Body': '{"trade_code": 1234}', 'Expected Response': '{"success":false,"detail":"Invalid trade code!","data":null} ', 'Expected Status Code': '203', ...}
token = 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXIiOiIiLCJjb2RlIjoiNjJkNjcxZTEzYTFmMDQzYjllYmY5MGZkIiwiY3JlYXRlZ...Y2axiSWYmRqW7a7TfBOTcbZtIR7i6xPPDrVgPJ6lQ4VlqSYbaP35vRf-VaAfrPfzNCBidq6_SHyBnBdSYXW1wU6eefkYT9Ej-ImxAHJ8VtNIHJ4MsK9PJA'

    @pytest.mark.parametrize("test_case", load_test_cases("data/test_cases.csv"))
    def test_api_case(test_case, token):
        assert token, "Không lấy được token, dừng quá trình kiểm thử."
    
        url = test_case['URL']
    
        # Parse headers và thêm Authorization từ cột Authorization
        try:
            headers = json.loads(test_case['Headers']) if test_case['Headers'] else {}
            headers["Authorization"] = test_case['Authorization'].replace("Bearer your_token_here", f"{token}")
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Headers: {test_case['Headers']}")
    
        # Parse body của yêu cầu
        try:
            payload = json.loads(test_case['Body']) if 'Body' in test_case and test_case['Body'] else {}
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Body: {test_case.get('Body', '')}")
    
        # Phương thức HTTP
        method = test_case['Method'].strip().upper()
        assert method in ['GET', 'POST', 'PUT', 'DELETE'], f"Phương thức HTTP '{method}' không hợp lệ"
    
        # Mã trạng thái mong đợi
        expected_status = int(test_case['Expected Status Code'])
        expected_result = test_case.get('Expected Response', '')
    
        # Gửi yêu cầu HTTP
        if method == 'GET':
            response = requests.get(url, headers=headers)
        elif method == 'POST':
            response = requests.post(url, headers=headers, json=payload)
        elif method == 'PUT':
            response = requests.put(url, headers=headers, json=payload)
        elif method == 'DELETE':
            response = requests.delete(url, headers=headers, json=payload)
    
        # Kiểm tra kết quả
        actual_status = response.status_code
        actual_body = response.json() if response.headers.get("Content-Type") == "application/json" else response.text
    
          #  Sử dụng try-except cho ghi nhận kết quả, đồng thời cho phép pytest xử lý assert để tạo báo cáo HTML chính xác
        pass_fail = "Pass"
        error_message = ""
        try:
            assert actual_status == expected_status, f"Lỗi: Mã trạng thái thực tế ({actual_status}) không khớp với mong đợi ({expected_status})"
        except AssertionError as e:
            pass_fail = "Fail"
            error_message = str(e)
        # Thêm vào danh sách kết quả để ghi vào Excel
        results.append({
            "Test Case ID": test_case['Test Case ID'],
            "Expected Status": expected_status,
            "Expected Result": expected_result,
            "Actual Status": actual_status,
            "Actual Result": actual_body,
            "Result": pass_fail,
            "Error Message": error_message
        })
         # Dùng pytest.fail để đảm bảo báo cáo HTML ghi nhận các test case fail
        if pass_fail == "Fail":
&gt;           pytest.fail(error_message)
E           Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (203)
E           assert 200 == 203

tests/test_api.py:107: Failed</failure></testcase><testcase classname="tests.test_api" name="test_api_case[test_case53]" time="0.129"><failure message="Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (204)&#10;assert 200 == 204">test_case = {'Authorization': 'Bearer your_token_here', 'Body': '{"status": "1"}', 'Expected Response': '{"success":false,"detail":"Invalid status!","data":null} ', 'Expected Status Code': '204', ...}
token = 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXIiOiIiLCJjb2RlIjoiNjJkNjcxZTEzYTFmMDQzYjllYmY5MGZkIiwiY3JlYXRlZ...Y2axiSWYmRqW7a7TfBOTcbZtIR7i6xPPDrVgPJ6lQ4VlqSYbaP35vRf-VaAfrPfzNCBidq6_SHyBnBdSYXW1wU6eefkYT9Ej-ImxAHJ8VtNIHJ4MsK9PJA'

    @pytest.mark.parametrize("test_case", load_test_cases("data/test_cases.csv"))
    def test_api_case(test_case, token):
        assert token, "Không lấy được token, dừng quá trình kiểm thử."
    
        url = test_case['URL']
    
        # Parse headers và thêm Authorization từ cột Authorization
        try:
            headers = json.loads(test_case['Headers']) if test_case['Headers'] else {}
            headers["Authorization"] = test_case['Authorization'].replace("Bearer your_token_here", f"{token}")
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Headers: {test_case['Headers']}")
    
        # Parse body của yêu cầu
        try:
            payload = json.loads(test_case['Body']) if 'Body' in test_case and test_case['Body'] else {}
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Body: {test_case.get('Body', '')}")
    
        # Phương thức HTTP
        method = test_case['Method'].strip().upper()
        assert method in ['GET', 'POST', 'PUT', 'DELETE'], f"Phương thức HTTP '{method}' không hợp lệ"
    
        # Mã trạng thái mong đợi
        expected_status = int(test_case['Expected Status Code'])
        expected_result = test_case.get('Expected Response', '')
    
        # Gửi yêu cầu HTTP
        if method == 'GET':
            response = requests.get(url, headers=headers)
        elif method == 'POST':
            response = requests.post(url, headers=headers, json=payload)
        elif method == 'PUT':
            response = requests.put(url, headers=headers, json=payload)
        elif method == 'DELETE':
            response = requests.delete(url, headers=headers, json=payload)
    
        # Kiểm tra kết quả
        actual_status = response.status_code
        actual_body = response.json() if response.headers.get("Content-Type") == "application/json" else response.text
    
          #  Sử dụng try-except cho ghi nhận kết quả, đồng thời cho phép pytest xử lý assert để tạo báo cáo HTML chính xác
        pass_fail = "Pass"
        error_message = ""
        try:
            assert actual_status == expected_status, f"Lỗi: Mã trạng thái thực tế ({actual_status}) không khớp với mong đợi ({expected_status})"
        except AssertionError as e:
            pass_fail = "Fail"
            error_message = str(e)
        # Thêm vào danh sách kết quả để ghi vào Excel
        results.append({
            "Test Case ID": test_case['Test Case ID'],
            "Expected Status": expected_status,
            "Expected Result": expected_result,
            "Actual Status": actual_status,
            "Actual Result": actual_body,
            "Result": pass_fail,
            "Error Message": error_message
        })
         # Dùng pytest.fail để đảm bảo báo cáo HTML ghi nhận các test case fail
        if pass_fail == "Fail":
&gt;           pytest.fail(error_message)
E           Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (204)
E           assert 200 == 204

tests/test_api.py:107: Failed</failure></testcase><testcase classname="tests.test_api" name="test_api_case[test_case54]" time="0.130"><failure message="Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (205)&#10;assert 200 == 205">test_case = {'Authorization': 'Bearer your_token_here', 'Body': '{"is_sub_banner": "0"}', 'Expected Response': '{"success":false,"detail":"Invalid is_sub_banner!","data":null} ', 'Expected Status Code': '205', ...}
token = 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXIiOiIiLCJjb2RlIjoiNjJkNjcxZTEzYTFmMDQzYjllYmY5MGZkIiwiY3JlYXRlZ...Y2axiSWYmRqW7a7TfBOTcbZtIR7i6xPPDrVgPJ6lQ4VlqSYbaP35vRf-VaAfrPfzNCBidq6_SHyBnBdSYXW1wU6eefkYT9Ej-ImxAHJ8VtNIHJ4MsK9PJA'

    @pytest.mark.parametrize("test_case", load_test_cases("data/test_cases.csv"))
    def test_api_case(test_case, token):
        assert token, "Không lấy được token, dừng quá trình kiểm thử."
    
        url = test_case['URL']
    
        # Parse headers và thêm Authorization từ cột Authorization
        try:
            headers = json.loads(test_case['Headers']) if test_case['Headers'] else {}
            headers["Authorization"] = test_case['Authorization'].replace("Bearer your_token_here", f"{token}")
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Headers: {test_case['Headers']}")
    
        # Parse body của yêu cầu
        try:
            payload = json.loads(test_case['Body']) if 'Body' in test_case and test_case['Body'] else {}
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Body: {test_case.get('Body', '')}")
    
        # Phương thức HTTP
        method = test_case['Method'].strip().upper()
        assert method in ['GET', 'POST', 'PUT', 'DELETE'], f"Phương thức HTTP '{method}' không hợp lệ"
    
        # Mã trạng thái mong đợi
        expected_status = int(test_case['Expected Status Code'])
        expected_result = test_case.get('Expected Response', '')
    
        # Gửi yêu cầu HTTP
        if method == 'GET':
            response = requests.get(url, headers=headers)
        elif method == 'POST':
            response = requests.post(url, headers=headers, json=payload)
        elif method == 'PUT':
            response = requests.put(url, headers=headers, json=payload)
        elif method == 'DELETE':
            response = requests.delete(url, headers=headers, json=payload)
    
        # Kiểm tra kết quả
        actual_status = response.status_code
        actual_body = response.json() if response.headers.get("Content-Type") == "application/json" else response.text
    
          #  Sử dụng try-except cho ghi nhận kết quả, đồng thời cho phép pytest xử lý assert để tạo báo cáo HTML chính xác
        pass_fail = "Pass"
        error_message = ""
        try:
            assert actual_status == expected_status, f"Lỗi: Mã trạng thái thực tế ({actual_status}) không khớp với mong đợi ({expected_status})"
        except AssertionError as e:
            pass_fail = "Fail"
            error_message = str(e)
        # Thêm vào danh sách kết quả để ghi vào Excel
        results.append({
            "Test Case ID": test_case['Test Case ID'],
            "Expected Status": expected_status,
            "Expected Result": expected_result,
            "Actual Status": actual_status,
            "Actual Result": actual_body,
            "Result": pass_fail,
            "Error Message": error_message
        })
         # Dùng pytest.fail để đảm bảo báo cáo HTML ghi nhận các test case fail
        if pass_fail == "Fail":
&gt;           pytest.fail(error_message)
E           Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (205)
E           assert 200 == 205

tests/test_api.py:107: Failed</failure></testcase><testcase classname="tests.test_api" name="test_api_case[test_case55]" time="0.108"><failure message="Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (206)&#10;assert 200 == 206">test_case = {'Authorization': 'Bearer your_token_here', 'Body': '{"page": 0, "page_size": 0}', 'Expected Response': '{"success":false,"detail":"Invalid page and page size!","data":null}', 'Expected Status Code': '206', ...}
token = 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXIiOiIiLCJjb2RlIjoiNjJkNjcxZTEzYTFmMDQzYjllYmY5MGZkIiwiY3JlYXRlZ...Y2axiSWYmRqW7a7TfBOTcbZtIR7i6xPPDrVgPJ6lQ4VlqSYbaP35vRf-VaAfrPfzNCBidq6_SHyBnBdSYXW1wU6eefkYT9Ej-ImxAHJ8VtNIHJ4MsK9PJA'

    @pytest.mark.parametrize("test_case", load_test_cases("data/test_cases.csv"))
    def test_api_case(test_case, token):
        assert token, "Không lấy được token, dừng quá trình kiểm thử."
    
        url = test_case['URL']
    
        # Parse headers và thêm Authorization từ cột Authorization
        try:
            headers = json.loads(test_case['Headers']) if test_case['Headers'] else {}
            headers["Authorization"] = test_case['Authorization'].replace("Bearer your_token_here", f"{token}")
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Headers: {test_case['Headers']}")
    
        # Parse body của yêu cầu
        try:
            payload = json.loads(test_case['Body']) if 'Body' in test_case and test_case['Body'] else {}
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Body: {test_case.get('Body', '')}")
    
        # Phương thức HTTP
        method = test_case['Method'].strip().upper()
        assert method in ['GET', 'POST', 'PUT', 'DELETE'], f"Phương thức HTTP '{method}' không hợp lệ"
    
        # Mã trạng thái mong đợi
        expected_status = int(test_case['Expected Status Code'])
        expected_result = test_case.get('Expected Response', '')
    
        # Gửi yêu cầu HTTP
        if method == 'GET':
            response = requests.get(url, headers=headers)
        elif method == 'POST':
            response = requests.post(url, headers=headers, json=payload)
        elif method == 'PUT':
            response = requests.put(url, headers=headers, json=payload)
        elif method == 'DELETE':
            response = requests.delete(url, headers=headers, json=payload)
    
        # Kiểm tra kết quả
        actual_status = response.status_code
        actual_body = response.json() if response.headers.get("Content-Type") == "application/json" else response.text
    
          #  Sử dụng try-except cho ghi nhận kết quả, đồng thời cho phép pytest xử lý assert để tạo báo cáo HTML chính xác
        pass_fail = "Pass"
        error_message = ""
        try:
            assert actual_status == expected_status, f"Lỗi: Mã trạng thái thực tế ({actual_status}) không khớp với mong đợi ({expected_status})"
        except AssertionError as e:
            pass_fail = "Fail"
            error_message = str(e)
        # Thêm vào danh sách kết quả để ghi vào Excel
        results.append({
            "Test Case ID": test_case['Test Case ID'],
            "Expected Status": expected_status,
            "Expected Result": expected_result,
            "Actual Status": actual_status,
            "Actual Result": actual_body,
            "Result": pass_fail,
            "Error Message": error_message
        })
         # Dùng pytest.fail để đảm bảo báo cáo HTML ghi nhận các test case fail
        if pass_fail == "Fail":
&gt;           pytest.fail(error_message)
E           Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (206)
E           assert 200 == 206

tests/test_api.py:107: Failed</failure></testcase><testcase classname="tests.test_api" name="test_api_case[test_case56]" time="0.121" /><testcase classname="tests.test_api" name="test_api_case[test_case57]" time="0.115" /><testcase classname="tests.test_api" name="test_api_case[test_case58]" time="0.127" /><testcase classname="tests.test_api" name="test_api_case[test_case59]" time="0.119" /><testcase classname="tests.test_api" name="test_api_case[test_case60]" time="0.169"><failure message="Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (400)&#10;assert 200 == 400">test_case = {'Authorization': 'Bearer your_token_here', 'Body': '{"is_sub_banner": "1"}', 'Expected Response': '', 'Expected Status Code': '400', ...}
token = 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXIiOiIiLCJjb2RlIjoiNjJkNjcxZTEzYTFmMDQzYjllYmY5MGZkIiwiY3JlYXRlZ...Y2axiSWYmRqW7a7TfBOTcbZtIR7i6xPPDrVgPJ6lQ4VlqSYbaP35vRf-VaAfrPfzNCBidq6_SHyBnBdSYXW1wU6eefkYT9Ej-ImxAHJ8VtNIHJ4MsK9PJA'

    @pytest.mark.parametrize("test_case", load_test_cases("data/test_cases.csv"))
    def test_api_case(test_case, token):
        assert token, "Không lấy được token, dừng quá trình kiểm thử."
    
        url = test_case['URL']
    
        # Parse headers và thêm Authorization từ cột Authorization
        try:
            headers = json.loads(test_case['Headers']) if test_case['Headers'] else {}
            headers["Authorization"] = test_case['Authorization'].replace("Bearer your_token_here", f"{token}")
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Headers: {test_case['Headers']}")
    
        # Parse body của yêu cầu
        try:
            payload = json.loads(test_case['Body']) if 'Body' in test_case and test_case['Body'] else {}
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Body: {test_case.get('Body', '')}")
    
        # Phương thức HTTP
        method = test_case['Method'].strip().upper()
        assert method in ['GET', 'POST', 'PUT', 'DELETE'], f"Phương thức HTTP '{method}' không hợp lệ"
    
        # Mã trạng thái mong đợi
        expected_status = int(test_case['Expected Status Code'])
        expected_result = test_case.get('Expected Response', '')
    
        # Gửi yêu cầu HTTP
        if method == 'GET':
            response = requests.get(url, headers=headers)
        elif method == 'POST':
            response = requests.post(url, headers=headers, json=payload)
        elif method == 'PUT':
            response = requests.put(url, headers=headers, json=payload)
        elif method == 'DELETE':
            response = requests.delete(url, headers=headers, json=payload)
    
        # Kiểm tra kết quả
        actual_status = response.status_code
        actual_body = response.json() if response.headers.get("Content-Type") == "application/json" else response.text
    
          #  Sử dụng try-except cho ghi nhận kết quả, đồng thời cho phép pytest xử lý assert để tạo báo cáo HTML chính xác
        pass_fail = "Pass"
        error_message = ""
        try:
            assert actual_status == expected_status, f"Lỗi: Mã trạng thái thực tế ({actual_status}) không khớp với mong đợi ({expected_status})"
        except AssertionError as e:
            pass_fail = "Fail"
            error_message = str(e)
        # Thêm vào danh sách kết quả để ghi vào Excel
        results.append({
            "Test Case ID": test_case['Test Case ID'],
            "Expected Status": expected_status,
            "Expected Result": expected_result,
            "Actual Status": actual_status,
            "Actual Result": actual_body,
            "Result": pass_fail,
            "Error Message": error_message
        })
         # Dùng pytest.fail để đảm bảo báo cáo HTML ghi nhận các test case fail
        if pass_fail == "Fail":
&gt;           pytest.fail(error_message)
E           Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (400)
E           assert 200 == 400

tests/test_api.py:107: Failed</failure></testcase><testcase classname="tests.test_api" name="test_api_case[test_case61]" time="0.166" /><testcase classname="tests.test_api" name="test_api_case[test_case62]" time="0.123" /><testcase classname="tests.test_api" name="test_api_case[test_case63]" time="0.146" /><testcase classname="tests.test_api" name="test_api_case[test_case64]" time="0.135" /><testcase classname="tests.test_api" name="test_api_case[test_case65]" time="0.168" /><testcase classname="tests.test_api" name="test_api_case[test_case66]" time="0.141" /><testcase classname="tests.test_api" name="test_api_case[test_case67]" time="0.133"><failure message="Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (415)&#10;assert 200 == 415">test_case = {'Authorization': 'Bearer your_token_here', 'Body': '{}', 'Expected Response': '{"detail": "Only Content-Type is supported as application/json"}', 'Expected Status Code': '415', ...}
token = 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXIiOiIiLCJjb2RlIjoiNjJkNjcxZTEzYTFmMDQzYjllYmY5MGZkIiwiY3JlYXRlZ...Y2axiSWYmRqW7a7TfBOTcbZtIR7i6xPPDrVgPJ6lQ4VlqSYbaP35vRf-VaAfrPfzNCBidq6_SHyBnBdSYXW1wU6eefkYT9Ej-ImxAHJ8VtNIHJ4MsK9PJA'

    @pytest.mark.parametrize("test_case", load_test_cases("data/test_cases.csv"))
    def test_api_case(test_case, token):
        assert token, "Không lấy được token, dừng quá trình kiểm thử."
    
        url = test_case['URL']
    
        # Parse headers và thêm Authorization từ cột Authorization
        try:
            headers = json.loads(test_case['Headers']) if test_case['Headers'] else {}
            headers["Authorization"] = test_case['Authorization'].replace("Bearer your_token_here", f"{token}")
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Headers: {test_case['Headers']}")
    
        # Parse body của yêu cầu
        try:
            payload = json.loads(test_case['Body']) if 'Body' in test_case and test_case['Body'] else {}
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Body: {test_case.get('Body', '')}")
    
        # Phương thức HTTP
        method = test_case['Method'].strip().upper()
        assert method in ['GET', 'POST', 'PUT', 'DELETE'], f"Phương thức HTTP '{method}' không hợp lệ"
    
        # Mã trạng thái mong đợi
        expected_status = int(test_case['Expected Status Code'])
        expected_result = test_case.get('Expected Response', '')
    
        # Gửi yêu cầu HTTP
        if method == 'GET':
            response = requests.get(url, headers=headers)
        elif method == 'POST':
            response = requests.post(url, headers=headers, json=payload)
        elif method == 'PUT':
            response = requests.put(url, headers=headers, json=payload)
        elif method == 'DELETE':
            response = requests.delete(url, headers=headers, json=payload)
    
        # Kiểm tra kết quả
        actual_status = response.status_code
        actual_body = response.json() if response.headers.get("Content-Type") == "application/json" else response.text
    
          #  Sử dụng try-except cho ghi nhận kết quả, đồng thời cho phép pytest xử lý assert để tạo báo cáo HTML chính xác
        pass_fail = "Pass"
        error_message = ""
        try:
            assert actual_status == expected_status, f"Lỗi: Mã trạng thái thực tế ({actual_status}) không khớp với mong đợi ({expected_status})"
        except AssertionError as e:
            pass_fail = "Fail"
            error_message = str(e)
        # Thêm vào danh sách kết quả để ghi vào Excel
        results.append({
            "Test Case ID": test_case['Test Case ID'],
            "Expected Status": expected_status,
            "Expected Result": expected_result,
            "Actual Status": actual_status,
            "Actual Result": actual_body,
            "Result": pass_fail,
            "Error Message": error_message
        })
         # Dùng pytest.fail để đảm bảo báo cáo HTML ghi nhận các test case fail
        if pass_fail == "Fail":
&gt;           pytest.fail(error_message)
E           Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (415)
E           assert 200 == 415

tests/test_api.py:107: Failed</failure></testcase><testcase classname="tests.test_api" name="test_api_case[test_case68]" time="0.128" /><testcase classname="tests.test_api" name="test_api_case[test_case69]" time="0.110" /><testcase classname="tests.test_api" name="test_api_case[test_case70]" time="0.142" /><testcase classname="tests.test_api" name="test_api_case[test_case71]" time="0.154" /><testcase classname="tests.test_api" name="test_api_case[test_case72]" time="0.098" /><testcase classname="tests.test_api" name="test_api_case[test_case73]" time="0.567"><failure message="Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (404)&#10;assert 200 == 404">test_case = {'Authorization': 'Bearer your_token_here', 'Body': '{}', 'Expected Response': '{ "detail": "Popup not found", "success": false }', 'Expected Status Code': '404', ...}
token = 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXIiOiIiLCJjb2RlIjoiNjJkNjcxZTEzYTFmMDQzYjllYmY5MGZkIiwiY3JlYXRlZ...Y2axiSWYmRqW7a7TfBOTcbZtIR7i6xPPDrVgPJ6lQ4VlqSYbaP35vRf-VaAfrPfzNCBidq6_SHyBnBdSYXW1wU6eefkYT9Ej-ImxAHJ8VtNIHJ4MsK9PJA'

    @pytest.mark.parametrize("test_case", load_test_cases("data/test_cases.csv"))
    def test_api_case(test_case, token):
        assert token, "Không lấy được token, dừng quá trình kiểm thử."
    
        url = test_case['URL']
    
        # Parse headers và thêm Authorization từ cột Authorization
        try:
            headers = json.loads(test_case['Headers']) if test_case['Headers'] else {}
            headers["Authorization"] = test_case['Authorization'].replace("Bearer your_token_here", f"{token}")
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Headers: {test_case['Headers']}")
    
        # Parse body của yêu cầu
        try:
            payload = json.loads(test_case['Body']) if 'Body' in test_case and test_case['Body'] else {}
        except json.JSONDecodeError:
            pytest.fail(f"Lỗi giải mã JSON trong Body: {test_case.get('Body', '')}")
    
        # Phương thức HTTP
        method = test_case['Method'].strip().upper()
        assert method in ['GET', 'POST', 'PUT', 'DELETE'], f"Phương thức HTTP '{method}' không hợp lệ"
    
        # Mã trạng thái mong đợi
        expected_status = int(test_case['Expected Status Code'])
        expected_result = test_case.get('Expected Response', '')
    
        # Gửi yêu cầu HTTP
        if method == 'GET':
            response = requests.get(url, headers=headers)
        elif method == 'POST':
            response = requests.post(url, headers=headers, json=payload)
        elif method == 'PUT':
            response = requests.put(url, headers=headers, json=payload)
        elif method == 'DELETE':
            response = requests.delete(url, headers=headers, json=payload)
    
        # Kiểm tra kết quả
        actual_status = response.status_code
        actual_body = response.json() if response.headers.get("Content-Type") == "application/json" else response.text
    
          #  Sử dụng try-except cho ghi nhận kết quả, đồng thời cho phép pytest xử lý assert để tạo báo cáo HTML chính xác
        pass_fail = "Pass"
        error_message = ""
        try:
            assert actual_status == expected_status, f"Lỗi: Mã trạng thái thực tế ({actual_status}) không khớp với mong đợi ({expected_status})"
        except AssertionError as e:
            pass_fail = "Fail"
            error_message = str(e)
        # Thêm vào danh sách kết quả để ghi vào Excel
        results.append({
            "Test Case ID": test_case['Test Case ID'],
            "Expected Status": expected_status,
            "Expected Result": expected_result,
            "Actual Status": actual_status,
            "Actual Result": actual_body,
            "Result": pass_fail,
            "Error Message": error_message
        })
         # Dùng pytest.fail để đảm bảo báo cáo HTML ghi nhận các test case fail
        if pass_fail == "Fail":
&gt;           pytest.fail(error_message)
E           Failed: Lỗi: Mã trạng thái thực tế (200) không khớp với mong đợi (404)
E           assert 200 == 404

tests/test_api.py:107: Failed</failure></testcase><testcase classname="tests.test_api" name="test_api_case[test_case74]" time="0.119" /><testcase classname="tests.test_api" name="test_api_case[test_case75]" time="0.130" /><testcase classname="tests.test_api" name="test_api_case[test_case76]" time="0.109" /><testcase classname="tests.test_api" name="test_api_case[test_case77]" time="0.097" /><testcase classname="tests.test_api" name="test_api_case[test_case78]" time="0.096" /><testcase classname="tests.test_api" name="test_api_case[test_case79]" time="0.108" /><testcase classname="tests.test_api" name="test_api_case[test_case80]" time="0.121" /><testcase classname="tests.test_api" name="test_api_case[test_case81]" time="0.111" /><testcase classname="tests.test_api" name="test_api_case[test_case82]" time="0.104" /><testcase classname="tests.test_api" name="test_api_case[test_case83]" time="0.100" /><testcase classname="tests.test_api" name="test_api_case[test_case84]" time="0.111" /><testcase classname="tests.test_api" name="test_api_case[test_case85]" time="0.105" /><testcase classname="tests.test_api" name="test_api_case[test_case86]" time="0.121" /><testcase classname="tests.test_api" name="test_api_case[test_case87]" time="0.131" /><testcase classname="tests.test_api" name="test_api_case[test_case88]" time="0.109" /><testcase classname="tests.test_api" name="test_api_case[test_case89]" time="0.112" /><testcase classname="tests.test_api" name="test_api_case[test_case90]" time="0.117" /><testcase classname="tests.test_api" name="test_api_case[test_case91]" time="0.109" /><testcase classname="tests.test_api" name="test_api_case[test_case92]" time="0.097" /><testcase classname="tests.test_api" name="test_api_case[test_case93]" time="0.103" /><testcase classname="tests.test_api" name="test_api_case[test_case94]" time="0.105" /><testcase classname="tests.test_api" name="test_api_case[test_case95]" time="0.113" /><testcase classname="tests.test_api" name="test_api_case[test_case96]" time="0.108" /><testcase classname="tests.test_api" name="test_api_case[test_case97]" time="0.099" /><testcase classname="tests.test_api" name="test_api_case[test_case98]" time="0.115" /><testcase classname="tests.test_api" name="test_api_case[test_case99]" time="0.237" /><testcase classname="tests.test_api" name="test_api_case[test_case100]" time="0.117" /><testcase classname="tests.test_test_untils" name="test_load_config" time="0.001" /><testcase classname="tests.test_test_untils" name="test_parse_json_string" time="0.001" /><testcase classname="tests.test_test_untils" name="test_compare_response" time="0.279" /></testsuite></testsuites>